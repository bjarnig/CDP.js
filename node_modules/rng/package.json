{
  "name": "rng",
  "version": "0.2.2",
  "license": "MIT",
  "description": "Collection of seedable Pseudorandom Number Generators",
  "kewords": [
    "seed",
    "pseudo",
    "random",
    "number",
    "generator",
    "mersenne",
    "twister",
    "park",
    "miller",
    "xor",
    "shift"
  ],
  "author": {
    "name": "Jonas Hermsmeier",
    "email": "jhermsmeier@gmail.com",
    "url": "https://github.com/jhermsmeier"
  },
  "main": "rng",
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha",
    "bench": "node node_modules/matcha/bin/matcha"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "",
    "matcha": ""
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jhermsmeier/rng.js.git"
  },
  "bugs": {
    "url": "https://github.com/jhermsmeier/rng.js/issues"
  },
  "readme": "# Random [![build status](https://secure.travis-ci.org/jhermsmeier/rng.js.png)](http://travis-ci.org/jhermsmeier/rng.js) [![NPM version](https://badge.fury.io/js/rng.png)](https://npmjs.org/rng) [![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/jhermsmeier/rng.js/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n\n## Install via [npm](https://npmjs.org/)\n\n```shell\n$ npm install rng\n```\n\n\n## Install via [component](http://github.com/component/)\n\n```shell\n$ component install jhermsmeier/rng.js\n```\n\n\n## Install via [bower](http://twitter.github.com/bower/)\n\n```shell\n$ bower install rng\n```\n\n\n## Usage\n\n### Node.js\n\n```javascript\n// Require the module\nvar Random = require( 'rng' )\n// Instantiate a new Mersenne Twister with a seed\nvar mt = new Random.MT( seed )\n// ...\n```\n\n\n### Browser\n\n```html\n<!-- Required -->\n<script src=\"path/to/rng/rng.js\"></script>\n<!-- Optionals, only load what you need -->\n<script src=\"path/to/rng/lib/mersenne-twister.js\"></script>\n<script src=\"path/to/rng/lib/park-miller.js\"></script>\n<script src=\"path/to/rng/lib/....js\"></script>\n```\n\n```javascript\n// RNG.js exports the global `Random`, so you're good to go.\n// Instantiate a new Mersenne Twister with a seed\nvar mt = new Random.MT( seed )\n```\n\n\n## API\n\n### Class: `RNG()`\nBase class using `Math.random()` as PRNG.\nAll other classes inherit from `RNG()`.\n\n#### Methods\n\n**Number `next()`**\nGet a random byte [0,255]\n\n**Number `random()`**\nSame as `uniform()`, just to be compatible with the `Math.random()` style API\n\n**Number `uniform()`**\nGet a uniform random number between 0 and 1\n\n**Number `normal()`**\nGet normally distributed number, with a mean 0, variance 1\n\n**Number `range( min, max )`**\nGet random integer in range [min,max]\n\n**Number `exp()`**\nGet exponentionally distributed number with lambda 1\n\n**Number `poisson( mean )`**\nGet poisson distributed number, the mean defaulting to 1\n\n**Number `gaussian( a )`**\nGet gamma distributed number, using uniform, normal and exp with the Marsaglia-Tsang method\n\n\n## Algorithms\n\n### Class: `RNG.MT( seed )` - *Mersenne Twister*\n### Class: `RNG.PM( seed )` - *Park-Miller*\n### Class: `RNG.XOR( x, y, z, w )` - *XOR Shift*\n\n\n#### Not (yet?) implemented:\n\n- **ISAAC** - *ISAAC (indirection, shift, accumulate, add, count)*\n- **MWC** - *Multiply-With-Carry*\n- **CMWC** - *Complementary-Multiply-With-Carry*\n- **LCG** - *Linear Congruential Generator*\n- **ICG** - *Inversive Congruential Generator*\n- **LFG** - *Lagged Fibonacci Generator*\n- **LFSR** - *Linear Feedback Shift Register*\n- **NRPF** - *Naor-Reingold Pseudorandom Function*\n- **BBS** - *Blum Blum Shub*\n",
  "readmeFilename": "README.md",
  "_id": "rng@0.2.2",
  "_from": "rng@"
}
